import pytest
from shapely.affinity import rotate, translate
from shapely.geometry import Polygon, box

from cad.common.lasercut import Model, MultipartModel
from cad.common.physics_packer import generate_layout, pack_polygons


@pytest.mark.llmgenerated
class TestPhysicsPacker:
    def test_pack_polygons_basic(self):
        """
        Test basic functionality of pack_polygons with simple shapes.
        """
        polygons = [
            box(0, 0, 10, 10),
            box(0, 0, 15, 15),
            box(0, 0, 20, 20),
        ]
        margin = 1

        # Pack polygons
        transform_map = pack_polygons(polygons, margin=margin)

        # Assert all polygons have transformations
        assert len(transform_map) == len(polygons)
        for key, (pos, angle) in transform_map.items():
            assert isinstance(pos, tuple), "Position should be a tuple"
            assert isinstance(angle, float), "Angle should be a float"
            assert pos[0] >= 0 and pos[1] >= 0, "Position should be non-negative"

    def test_pack_polygons_no_overlap(self):
        """
        Test that packed polygons do not overlap.
        """
        polygons = [
            box(0, 0, 10, 10),
            box(0, 0, 15, 15),
            box(0, 0, 20, 20),
        ]
        margin = 1

        # Pack polygons
        transform_map = pack_polygons(polygons, margin=margin)

        # Apply transformations to polygons
        transformed_polygons = []
        for i, poly in enumerate(polygons):
            pos, angle = transform_map[i]
            rotated_poly = rotate(poly, angle, origin=(0, 0))
            transformed_poly = translate(rotated_poly, xoff=pos[0], yoff=pos[1])
            transformed_polygons.append(transformed_poly)

        # Assert no overlaps between transformed polygons
        for i in range(len(transformed_polygons)):
            for j in range(i + 1, len(transformed_polygons)):
                assert not transformed_polygons[i].intersects(
                    transformed_polygons[j]
                ), "Transformed polygons should not overlap"

    def test_generate_layout_basic(self):
        """
        Test basic functionality of generate_layout with a simple MultipartModel.
        """
        model = MultipartModel()
        model.add_part(box(0, 0, 10, 10))
        model.add_part(box(0, 0, 15, 15))
        model.add_part(box(0, 0, 20, 20))

        # Generate layout
        layout = generate_layout(model)

        # Assert layout contains all models
        assert len(layout) == len(model.models)
        for m in model.models:
            assert m in layout, "All models should be in the layout"
            print(layout[m])
            x, y, angle = layout[m]
            assert isinstance(x, float), "X should be a float"
            assert isinstance(y, float), "Y should be a float"
            assert isinstance(angle, float), "Angle should be a float"

    def test_generate_layout_no_overlap(self):
        """
        Test that the layout generated by generate_layout has no overlapping parts.
        """
        model = MultipartModel()
        model.add_part(box(0, 0, 10, 10))
        model.add_part(box(0, 0, 15, 15))
        model.add_part(box(0, 0, 20, 20))

        # Generate layout
        layout = generate_layout(model)

        # Apply transformations to polygons
        transformed_polygons = []
        for m, (x, y, angle) in layout.items():
            for part in m.parts:
                poly = part.polygon
                rotated_poly = rotate(poly, angle, origin=(0, 0))
                transformed_poly = translate(rotated_poly, xoff=x, yoff=y)
                transformed_polygons.append(transformed_poly)

        # Assert no overlaps between transformed polygons
        for i in range(len(transformed_polygons)):
            for j in range(i + 1, len(transformed_polygons)):
                assert not transformed_polygons[i].intersects(
                    transformed_polygons[j]
                ), "Transformed polygons should not overlap"

    @pytest.mark.parametrize("margin", [0, 1, 5])
    def test_pack_polygons_with_margin(self, margin):
        """
        Test packing polygons with different margins.
        """
        polygons = [
            box(0, 0, 10, 10),
            box(0, 0, 15, 15),
            box(0, 0, 20, 20),
        ]

        # Pack polygons
        transform_map = pack_polygons(polygons, margin=margin)

        # Apply transformations to polygons
        transformed_polygons = []
        for i, poly in enumerate(polygons):
            pos, angle = transform_map[i]
            rotated_poly = rotate(poly, angle, origin=(0, 0))
            transformed_poly = translate(rotated_poly, xoff=pos[0], yoff=pos[1])
            transformed_polygons.append(transformed_poly)

        # Assert no overlaps with specified margin
        for i in range(len(transformed_polygons)):
            for j in range(i + 1, len(transformed_polygons)):
                assert (
                    not transformed_polygons[i]
                    .buffer(-margin)
                    .intersects(transformed_polygons[j].buffer(-margin))
                ), "Polygons should respect margin"

    def test_empty_model(self):
        """
        Test generate_layout with an empty MultipartModel.
        """
        model = MultipartModel()

        # Generate layout
        layout = generate_layout(model)

        # Assert layout is empty
        assert len(layout) == 0, "Layout should be empty for an empty model"
